name: Publish to DockerHub

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to publish'
        required: true
        default: 'latest'

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write  # Required for SARIF upload
      id-token: write  # Required for attestation
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: aywengo/kafka-schema-reg-mcp
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=ref,event=tag
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=stable
          labels: |
            org.opencontainers.image.title=Kafka Schema Registry MCP Server
            org.opencontainers.image.description=True MCP server for Kafka Schema Registry with single & multi-registry support, 48 tools, numbered env config, context isolation, schema export, and Claude Desktop integration
            org.opencontainers.image.vendor=aywengo
            org.opencontainers.image.version={{version}}
            org.opencontainers.image.created={{date 'YYYY-MM-DDTHH:mm:ssZ'}}
            org.opencontainers.image.revision={{sha}}
            org.opencontainers.image.url=https://github.com/${{ github.repository }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.documentation=https://github.com/${{ github.repository }}#readme

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ steps.meta.outputs.version }}
            BUILD_DATE=${{ steps.meta.outputs.created }}
            VCS_REF=${{ github.sha }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: aywengo/kafka-schema-reg-mcp:${{ steps.meta.outputs.version }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        continue-on-error: true  # Don't fail the workflow if SARIF upload fails
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Update Docker Hub description
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: aywengo/kafka-schema-reg-mcp
          short-description: "True MCP Server for Kafka Schema Registry - 20 tools, Claude Desktop ready, context support"
          readme-filepath: ./README.md

  create-release:
    runs-on: ubuntu-latest
    needs: publish
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write  # Required to create releases
    steps:
      - uses: actions/checkout@v4

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## üéâ Kafka Schema Registry MCP Server ${{ github.ref_name }} - True MCP Implementation
            
            **üöÄ MAJOR UPDATE**: Transformed from REST API to true MCP (Message Control Protocol) server compatible with Claude Desktop and other MCP clients.
            
            ### Docker Image
            ```bash
            # Specific version
            docker pull aywengo/kafka-schema-reg-mcp:${{ github.ref_name }}
            
            # Latest stable release
            docker pull aywengo/kafka-schema-reg-mcp:stable
            ```
            
            ### ü§ñ Claude Desktop Integration
            
            **Single Registry Mode:**
            ```json
            {
              "mcpServers": {
                "kafka-schema-registry": {
                  "command": "docker",
                  "args": [
                    "run", "--rm", "-i", "--network", "host",
                    "-e", "SCHEMA_REGISTRY_URL",
                    "-e", "SCHEMA_REGISTRY_USER", 
                    "-e", "SCHEMA_REGISTRY_PASSWORD",
                    "aywengo/kafka-schema-reg-mcp:stable"
                  ],
                  "env": {
                    "SCHEMA_REGISTRY_URL": "http://localhost:8081",
                    "SCHEMA_REGISTRY_USER": "",
                    "SCHEMA_REGISTRY_PASSWORD": ""
                  }
                }
              }
            }
            ```
            
            **Multi-Registry Mode (up to 8 registries):**
            ```json
            {
              "mcpServers": {
                "kafka-schema-registry-multi": {
                  "command": "docker",
                  "args": [
                    "run", "--rm", "-i", "--network", "host",
                    "-e", "SCHEMA_REGISTRY_NAME_1", "-e", "SCHEMA_REGISTRY_URL_1", "-e", "READONLY_1",
                    "-e", "SCHEMA_REGISTRY_NAME_2", "-e", "SCHEMA_REGISTRY_URL_2", "-e", "READONLY_2",
                    "aywengo/kafka-schema-reg-mcp:stable", "python", "kafka_schema_registry_multi_mcp.py"
                  ],
                  "env": {
                    "SCHEMA_REGISTRY_NAME_1": "development",
                    "SCHEMA_REGISTRY_URL_1": "http://localhost:8081",
                    "READONLY_1": "false",
                    "SCHEMA_REGISTRY_NAME_2": "production", 
                    "SCHEMA_REGISTRY_URL_2": "http://localhost:8082",
                    "READONLY_2": "true"
                  }
                }
              }
            }
            ```
            
            ### üó£Ô∏è Natural Language Usage
            ```
            "List all schema contexts"
            "Register a new user schema with fields for id, name, and email"
            "Export all schemas from the production context in Avro IDL format"
            "Check if my updated schema is compatible with the latest version"
            ```
            
            ### üìã MCP Features
            - ‚úÖ **48 MCP Tools**: Complete schema operations via natural language (20 original + 28 multi-registry)
            - ‚úÖ **Multi-Registry Support**: Manage up to 8 Schema Registry instances simultaneously
            - ‚úÖ **Numbered Environment Config**: Clean `SCHEMA_REGISTRY_NAME_X`, `SCHEMA_REGISTRY_URL_X` pattern (X=1-8)
            - ‚úÖ **Per-Registry READONLY**: Independent `READONLY_X` mode control for each registry
            - ‚úÖ **Cross-Registry Operations**: Compare, migrate, and sync schemas between registries
            - ‚úÖ **Context Management**: Production/staging environment isolation  
            - ‚úÖ **Schema Evolution**: Compatibility testing and version control
            - ‚úÖ **Export System**: JSON, Avro IDL formats for backup/migration
            - ‚úÖ **Configuration Control**: Global and per-context compatibility settings
            - ‚úÖ **Claude Desktop Ready**: Direct integration with AI workflows
            - ‚úÖ **Multi-Platform Support**: AMD64 and ARM64 architectures
            - ‚úÖ **Stable Tag**: Use `:stable` for production deployments (always latest release)
            
            ### üìö Documentation
            - [MCP Transformation Guide](MCP_TRANSFORMATION.md)
            - [Use Cases](docs/use-cases.md)
            - [API Reference](docs/api-reference.md) 
            - [IDE Integration](docs/ide-integration.md)
            - [Deployment Guide](docs/deployment.md)
            
            ### üß™ Test Results
            All advanced MCP features tested and working with live Schema Registry including context isolation, schema registration, compatibility checking, configuration management, and export functionality.
          draft: false
          prerelease: false 
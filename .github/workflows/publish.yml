name: Publish to DockerHub

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to publish (e.g., v1.3.0, dev-build, test, latest)'
        required: true
        default: 'dev-build'

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write  # Required for SARIF upload
      id-token: write  # Required for attestation
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: aywengo/kafka-schema-reg-mcp
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=ref,event=tag
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ github.event.inputs.tag }},enable=${{ github.event_name == 'workflow_dispatch' }}
          labels: |
            org.opencontainers.image.title=Kafka Schema Registry MCP Server
            org.opencontainers.image.description=True MCP server for Kafka Schema Registry with OAuth integration (Azure/Google/Keycloak/Okta), 48 tools, multi-registry support, Kubernetes deployment, and Claude Desktop integration
            org.opencontainers.image.vendor=aywengo
            org.opencontainers.image.version={{version}}
            org.opencontainers.image.created={{date 'YYYY-MM-DDTHH:mm:ssZ'}}
            org.opencontainers.image.revision={{sha}}
            org.opencontainers.image.url=https://github.com/${{ github.repository }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.documentation=https://github.com/${{ github.repository }}#readme

      - name: Build and push multi-platform
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false  # Disable provenance for multi-platform compatibility
          build-args: |
            VERSION=${{ steps.meta.outputs.version }}
            BUILD_DATE=${{ steps.meta.outputs.created }}
            VCS_REF=${{ github.sha }}

      - name: Verify multi-platform build 
        run: |
          echo "Verifying multi-platform manifest..."
          docker buildx imagetools inspect aywengo/kafka-schema-reg-mcp:${{ steps.meta.outputs.version }} > manifest.txt
          cat manifest.txt
          
          echo "Checking available platforms..."
          # Verify both platforms are present in the buildx inspect output
          if grep -q "linux/amd64" manifest.txt && grep -q "linux/arm64" manifest.txt; then
            echo "✅ Multi-platform build verified: AMD64 and ARM64 both available"
            echo "Available platforms:"
            grep -E "Platform:\s+linux/(amd64|arm64)" manifest.txt
          else
            echo "❌ Multi-platform build failed: Missing platforms"
            echo "Found platforms:"
            grep -E "Platform:\s+" manifest.txt || echo "No platforms found"
            exit 1
          fi

      - name: Wait for Docker Hub to sync image
        run: sleep 120

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'aywengo/kafka-schema-reg-mcp:${{ steps.meta.outputs.version }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          timeout: '10m0s'
        continue-on-error: true  # Don't fail the workflow if Trivy scan fails

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        continue-on-error: true  # Don't fail the workflow if SARIF upload fails
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Update Docker Hub description
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: aywengo/kafka-schema-reg-mcp
          short-description: "MCP Server for Kafka Schema Registry - 48 tools, OAuth integration (Azure/Google/Keycloak/Okta), Kubernetes ready"
          readme-filepath: ./dockerhub-readme.md

  create-release:
    runs-on: ubuntu-latest
    needs: publish
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write  # Required to create releases
    steps:
      - uses: actions/checkout@v4

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            ## 🔧 Kafka Schema Registry MCP Server ${{ github.ref_name }} - MAINTENANCE RELEASE
            
            **🛠️ Performance & Reliability Improvements**
            
            This maintenance release builds upon the solid v2.0.0 foundation with significant performance optimizations, enhanced reliability, and improved code maintainability.
            
            ---
            
            ## 🚀 What's New in v2.0.1
            
            ### 📈 **Performance & Code Quality Improvements**
            - **🔧 Major Code Refactoring**: Streamlined codebase across 74 files with improved readability and performance
            - **📊 Reduced Code Complexity**: Simplified error handling, consolidated list comprehensions, and enhanced function definitions
            - **🧹 Clean Architecture**: Removed 2,442 lines of redundant code while maintaining full functionality
            - **⚡ Memory Optimization**: Enhanced logging statements and improved resource management
            
            ### 🛡️ **Enhanced Schema Validation & Local Processing**
            - **🏠 Local JSON Schema Handling**: Implemented custom handler for draft-07 JSON Schema meta-schemas
            - **🚀 Zero Network Dependencies**: Local schema resolution prevents external network requests during validation
            - **📦 Custom Requests Adapter**: Enhanced requests library integration with mock responses for draft-07 schemas
            - **⚡ Improved Performance**: Faster validation and testing with consistent local behavior
            
            ### 🎭 **Advanced Elicitation Management**
            - **✨ Enhanced Elicitation Tools**: Added structured output decorators for `cancel_elicitation_request` and `get_elicitation_status`
            - **📋 New Schema Definitions**: Introduced comprehensive schemas for elicitation requests and status management
            - **🔄 Improved Response Structure**: Better error handling and compliance with expected response formats
            - **🎯 Reliable Validation**: Local draft-07 schema resolver for consistent elicitation workflows
            
            ### 🔄 **Robust Migration Confirmation System**
            - **⚠️ New Exception Handling**: `IDPreservationError` and `MigrationConfirmationRequired` for better migration control
            - **✅ User Confirmation Flow**: Enhanced `migrate_schema_tool` with ID preservation failure handling
            - **🛠️ New Confirmation Tool**: `confirm_migration_without_ids_tool` for proceeding without ID preservation
            - **📊 Detailed Migration Metadata**: Comprehensive structured output for migration results
            - **🧪 Comprehensive Testing**: 233 new test cases for migration confirmation scenarios
            
            ---
            
            ## 🎯 Key Improvements by the Numbers
            
            - **📉 Code Reduction**: 2,442 lines removed, 1,349 lines improved
            - **🗂️ Files Enhanced**: 74 files optimized across the entire codebase
            - **🧪 Test Coverage**: 233+ new test cases for migration scenarios
            - **⚡ Performance**: Faster validation with local schema resolution
            - **🛡️ Reliability**: Enhanced error handling and confirmation workflows
            
            ---
            
            ## 📦 Docker Deployment
            
            ```bash
            # Pull the latest maintenance release
            docker pull aywengo/kafka-schema-reg-mcp:${{ github.ref_name }}
            
            # Production deployment (same configuration as v2.0.0)
            docker run -d -p 8000:8000 \
              -e MCP_TRANSPORT=streamable-http \
              -e ENABLE_AUTH=true \
              -e AUTH_ISSUER_URL="https://accounts.google.com" \
              -e AUTH_AUDIENCE="your-client-id.apps.googleusercontent.com" \
              aywengo/kafka-schema-reg-mcp:${{ github.ref_name }}
            ```
            
            ---
            
            ## 🧪 Testing New Features
            
            ### **Enhanced Migration with Confirmation**
            ```bash
            # Test migration with ID preservation handling
            curl -X POST http://localhost:8000/mcp \
                 -H "Content-Type: application/json" \
                 -d '{"jsonrpc":"2.0","method":"tools/call","params":{"name":"migrate_schema","arguments":{"source_subject":"test-subject","target_subject":"new-subject"}},"id":1}'
            ```
            
            ### **Local Schema Validation**
            ```bash
            # Verify local draft-07 schema handling (no network requests)
            curl -X POST http://localhost:8000/mcp \
                 -d '{"jsonrpc":"2.0","method":"tools/call","params":{"name":"validate_schema","arguments":{"schema_content":"{\"type\":\"object\"}","schema_type":"JSON"}},"id":1}'
            ```
            
            ### **Enhanced Elicitation Status**
            ```bash
            # Test improved elicitation management
            curl -X POST http://localhost:8000/mcp \
                 -d '{"jsonrpc":"2.0","method":"tools/call","params":{"name":"get_elicitation_status","arguments":{"request_id":"test-id"}},"id":1}'
            ```
            
            ---
            
            ## ⬆️ Upgrade from v2.0.0
            
            **Zero Breaking Changes** - Direct drop-in replacement for v2.0.0!
            
            ```bash
            # Simple upgrade - no configuration changes needed
            docker pull aywengo/kafka-schema-reg-mcp:v2.0.1
            
            # All existing v2.0.0 configurations work unchanged
            # Enhanced performance and reliability automatically available
            ```
            
            **What You Get:**
            - ⚡ **Faster Performance**: Optimized code execution and memory usage
            - 🛡️ **Better Reliability**: Enhanced error handling and local schema processing
            - 🔄 **Improved Migrations**: Better confirmation workflows for complex scenarios
            - 🎭 **Enhanced Elicitation**: More robust interactive tool management
            
            ---
            
            ## 📚 Documentation
            
            All existing v2.0.0 documentation remains valid:
            - **[README-v2.0.0-HIGHLIGHTS.md](README-v2.0.0-HIGHLIGHTS.md)**: Complete feature overview
            - **[RESOURCE_LINKING.md](RESOURCE_LINKING.md)**: HATEOAS navigation system
            - **[OAuth Providers Guide](docs/oauth-providers-guide.md)**: Universal OAuth 2.1 setup
            - **[Remote MCP Deployment](docs/remote-mcp-deployment.md)**: Production deployment guide
            
            ---
            
            **🔧 v2.0.1 delivers significant performance improvements and enhanced reliability while maintaining full backward compatibility with v2.0.0. Perfect for production environments seeking optimal performance!**
            
            **Recommended upgrade for all v2.0.0 deployments! 🚀**
          draft: false
          prerelease: false

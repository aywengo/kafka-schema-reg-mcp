name: Publish to DockerHub

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to publish (e.g., v1.3.0, dev-build, test, latest)'
        required: true
        default: 'dev-build'

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write  # Required for SARIF upload
      id-token: write  # Required for attestation
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: aywengo/kafka-schema-reg-mcp
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=ref,event=tag
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ github.event.inputs.tag }},enable=${{ github.event_name == 'workflow_dispatch' }}
          labels: |
            org.opencontainers.image.title=Kafka Schema Registry MCP Server
            org.opencontainers.image.description=True MCP server for Kafka Schema Registry with OAuth integration (Azure/Google/Keycloak/Okta), 48 tools, multi-registry support, Kubernetes deployment, and Claude Desktop integration
            org.opencontainers.image.vendor=aywengo
            org.opencontainers.image.version={{version}}
            org.opencontainers.image.created={{date 'YYYY-MM-DDTHH:mm:ssZ'}}
            org.opencontainers.image.revision={{sha}}
            org.opencontainers.image.url=https://github.com/${{ github.repository }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.documentation=https://github.com/${{ github.repository }}#readme

      - name: Build and push multi-platform
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false  # Disable provenance for multi-platform compatibility
          build-args: |
            VERSION=${{ steps.meta.outputs.version }}
            BUILD_DATE=${{ steps.meta.outputs.created }}
            VCS_REF=${{ github.sha }}

      - name: Verify multi-platform build 
        run: |
          echo "Verifying multi-platform manifest..."
          docker buildx imagetools inspect aywengo/kafka-schema-reg-mcp:${{ steps.meta.outputs.version }}
          
          echo "Checking available platforms..."
          docker run --rm mplatform/mquery aywengo/kafka-schema-reg-mcp:${{ steps.meta.outputs.version }} > platforms.txt
          cat platforms.txt
          
          # Verify both platforms are present
          if grep -q "amd64" platforms.txt && grep -q "arm64" platforms.txt; then
            echo "‚úÖ Multi-platform build verified: AMD64 and ARM64 both available"
          else
            echo "‚ùå Multi-platform build failed: Missing platforms"
            cat platforms.txt
            exit 1
          fi

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: aywengo/kafka-schema-reg-mcp:${{ steps.meta.outputs.version }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        continue-on-error: true  # Don't fail the workflow if SARIF upload fails
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Update Docker Hub description
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: aywengo/kafka-schema-reg-mcp
          short-description: "MCP Server for Kafka Schema Registry - 48 tools, OAuth integration (Azure/Google/Keycloak/Okta), Kubernetes ready"
          readme-filepath: ./dockerhub-readme.md

  create-release:
    runs-on: ubuntu-latest
    needs: publish
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write  # Required to create releases
    steps:
      - uses: actions/checkout@v4

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            ## üöÄ Kafka Schema Registry MCP Server ${{ github.ref_name }} - MAJOR RELEASE: Remote MCP Server Revolution
            
            **üî• BREAKING RELEASE v2.0.0**: Complete transformation from local-only to enterprise-grade remote MCP server! This major version introduces OAuth 2.0 integration with 4 providers (Azure AD, Google, Keycloak, Okta), remote deployment capabilities compatible with Anthropic's MCP ecosystem, single-image dual-mode architecture, and production-ready Kubernetes deployment with FastMCP transport support.
            
            ### Docker Image
            ```bash
            # Specific version
            docker pull aywengo/kafka-schema-reg-mcp:${{ github.ref_name }}
            
            # Latest stable release
            docker pull aywengo/kafka-schema-reg-mcp:stable
            
            # Next release (planned):
            docker pull aywengo/kafka-schema-reg-mcp:2.1.0
            ```
            
            ### ü§ñ Claude Desktop Integration
            
            **Single Registry Mode:**
            ```json
            {
              "mcpServers": {
                "kafka-schema-registry": {
                  "command": "docker",
                  "args": [
                    "run", "--rm", "-i", "--network", "host",
                    "-e", "SCHEMA_REGISTRY_URL",
                    "-e", "SCHEMA_REGISTRY_USER", 
                    "-e", "SCHEMA_REGISTRY_PASSWORD",
                    "aywengo/kafka-schema-reg-mcp:stable"
                  ],
                  "env": {
                    "SCHEMA_REGISTRY_URL": "http://localhost:8081",
                    "SCHEMA_REGISTRY_USER": "",
                    "SCHEMA_REGISTRY_PASSWORD": ""
                  }
                }
              }
            }
            ```
            
            **Multi-Registry Mode (up to 8 registries):**
            ```json
            {
              "mcpServers": {
                "kafka-schema-registry-multi": {
                  "command": "docker",
                  "args": [
                    "run", "--rm", "-i", "--network", "host",
                    "-e", "SCHEMA_REGISTRY_NAME_1", "-e", "SCHEMA_REGISTRY_URL_1", "-e", "READONLY_1",
                    "-e", "SCHEMA_REGISTRY_NAME_2", "-e", "SCHEMA_REGISTRY_URL_2", "-e", "READONLY_2",
                    "aywengo/kafka-schema-reg-mcp:stable", "python", "kafka_schema_registry_multi_mcp.py"
                  ],
                  "env": {
                    "SCHEMA_REGISTRY_NAME_1": "development",
                    "SCHEMA_REGISTRY_URL_1": "http://localhost:8081",
                    "READONLY_1": "false",
                    "SCHEMA_REGISTRY_NAME_2": "production", 
                    "SCHEMA_REGISTRY_URL_2": "http://localhost:8082",
                    "READONLY_2": "true"
                  }
                }
              }
            }
            ```
            
            ### üîê Enterprise OAuth Integration (v1.9.0)
            ```
            "Deploy with Azure AD authentication to Kubernetes"
            ‚Üí Uses helm/examples/values-azure.yaml with complete OAuth setup
            
            "Connect VSCode to OAuth-secured MCP server"
            ‚Üí Seamless enterprise identity integration with Copilot
            
            "Configure Keycloak for self-hosted identity management"
            ‚Üí Production-ready OAuth with realm and client configuration
            ```
            
            ### üèóÔ∏è Modular Architecture (v1.8.1)
            - ‚úÖ **8 Specialized Modules**: Focused, maintainable codebase architecture
            - ‚úÖ **Parallel Development**: Multiple developers can work simultaneously
            - ‚úÖ **100% Backward Compatibility**: Original monolithic version still available
            - ‚úÖ **Independent Testing**: Each module can be tested in isolation
            - ‚úÖ **Plugin-Ready Structure**: Foundation for future extensibility
            
            ### üìã MCP Features (v1.9.0)
            - ‚úÖ **Enterprise OAuth Integration**: Azure AD, Google, Keycloak, Okta support
            - ‚úÖ **Production Kubernetes Deployment**: Helm charts with OAuth provider examples
            - ‚úÖ **OAuth Provider Configuration**: `get_oauth_provider_configs()` function for programmatic access
            - ‚úÖ **VSCode + Copilot OAuth**: Seamless enterprise identity integration
            - ‚úÖ **48 MCP Tools**: Complete schema operations via natural language
            - ‚úÖ **Simplified Context Migration**: Ready-to-run Docker commands with automatic credential mapping
            - ‚úÖ **External Tool Integration**: Leverages kafka-schema-reg-migrator for robust context migrations
            - ‚úÖ **Async Task Management**: Non-blocking operations with ThreadPoolExecutor
            - ‚úÖ **Real-Time Progress Tracking**: Monitor long-running operations (0-100%)
            - ‚úÖ **Multi-Registry Support**: Manage up to 8 Schema Registry instances
            - ‚úÖ **Numbered Environment Config**: Clean `SCHEMA_REGISTRY_NAME_X`, `SCHEMA_REGISTRY_URL_X` pattern
            - ‚úÖ **Per-Registry READONLY**: Independent `READONLY_X` mode control
            - ‚úÖ **Cross-Registry Operations**: Compare, migrate, and sync schemas
            - ‚úÖ **Context Management**: Production/staging environment isolation  
            - ‚úÖ **Schema Evolution**: Compatibility testing and version control
            - ‚úÖ **Export System**: JSON, Avro IDL formats for backup/migration
            - ‚úÖ **Configuration Control**: Global and per-context compatibility settings
            - ‚úÖ **Claude Desktop Ready**: Direct integration with AI workflows
            - ‚úÖ **Multi-Platform Support**: AMD64 and ARM64 architectures
            - ‚úÖ **Stable Tag**: Use `:stable` for production deployments
            
            ### üöÄ Async Operation Features
            - **Task States**: PENDING, RUNNING, COMPLETED, FAILED, CANCELLED
            - **Progress Tracking**: Human-readable stages with percentage completion
            - **Operation Types**: 
              - QUICK (<5s): Single schema operations
              - MEDIUM (5-30s): Small migrations and comparisons
              - LONG (>30s): Large context migrations, bulk cleanups
            - **Parallel Execution**: Multiple operations run concurrently
            - **Graceful Shutdown**: Proper cleanup and task cancellation
            
            ### üìä New Task Management Tools
            - `get_task_progress`: Real-time progress monitoring
            - `list_all_active_tasks`: View running operations
            - `cancel_task`: Stop long-running operations
            - `get_migration_progress`: Detailed migration status
            - `get_cleanup_progress`: Batch cleanup monitoring
            - `get_comparison_progress`: Registry comparison status
            
            ### üîê OAuth Provider Features (v1.9.0)
            - `get_oauth_provider_configs`: Access provider-specific OAuth configurations
            - **Azure AD Integration**: Complete Microsoft Graph API scope support
            - **Google OAuth**: Workspace and Cloud platform integration  
            - **Keycloak Support**: Self-hosted identity management with realm configuration
            - **Okta Integration**: Enterprise SaaS identity platform
            - **Kubernetes Deployment**: Production-ready Helm charts for each provider
            - **VSCode Integration**: OAuth-aware MCP client configuration
            - **JWT Validation**: Production-ready token verification framework
            
            ### üìö Documentation
            - [OAuth Providers Guide](docs/oauth-providers-guide.md) - **NEW in v1.9.0**
            - [Kubernetes Deployment Guide](K8S-DEPLOYMENT-GUIDE.md) - **ENHANCED with OAuth**
            - [MCP Transformation Guide](MCP_TRANSFORMATION.md)
            - [MCP Tools Reference](docs/mcp-tools-reference.md)
            - [Use Cases](docs/use-cases.md)
            - [API Reference](docs/api-reference.md) 
            - [IDE Integration](docs/ide-integration.md)
            - [Deployment Guide](docs/deployment.md)
            
            ### üß™ Test Results
            All async operations tested including task management, progress tracking, parallel execution, graceful shutdown, and event loop handling across different environments.
          draft: false
          prerelease: false 
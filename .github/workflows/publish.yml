name: Publish to DockerHub

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to publish (e.g., v1.3.0, dev-build, test, latest)'
        required: true
        default: 'dev-build'

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write  # Required for SARIF upload
      id-token: write  # Required for attestation
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: aywengo/kafka-schema-reg-mcp
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=ref,event=tag
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ github.event.inputs.tag }},enable=${{ github.event_name == 'workflow_dispatch' }}
          labels: |
            org.opencontainers.image.title=Kafka Schema Registry MCP Server
            org.opencontainers.image.description=True MCP server for Kafka Schema Registry with OAuth integration (Azure/Google/Keycloak/Okta), 48 tools, multi-registry support, Kubernetes deployment, and Claude Desktop integration
            org.opencontainers.image.vendor=aywengo
            org.opencontainers.image.version={{version}}
            org.opencontainers.image.created={{date 'YYYY-MM-DDTHH:mm:ssZ'}}
            org.opencontainers.image.revision={{sha}}
            org.opencontainers.image.url=https://github.com/${{ github.repository }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.documentation=https://github.com/${{ github.repository }}#readme

      - name: Build and push multi-platform
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false  # Disable provenance for multi-platform compatibility
          build-args: |
            VERSION=${{ steps.meta.outputs.version }}
            BUILD_DATE=${{ steps.meta.outputs.created }}
            VCS_REF=${{ github.sha }}

      - name: Verify multi-platform build 
        run: |
          echo "Verifying multi-platform manifest..."
          docker buildx imagetools inspect aywengo/kafka-schema-reg-mcp:${{ steps.meta.outputs.version }} > manifest.txt
          cat manifest.txt
          
          echo "Checking available platforms..."
          # Verify both platforms are present in the buildx inspect output
          if grep -q "linux/amd64" manifest.txt && grep -q "linux/arm64" manifest.txt; then
            echo "‚úÖ Multi-platform build verified: AMD64 and ARM64 both available"
            echo "Available platforms:"
            grep -E "Platform:\s+linux/(amd64|arm64)" manifest.txt
          else
            echo "‚ùå Multi-platform build failed: Missing platforms"
            echo "Found platforms:"
            grep -E "Platform:\s+" manifest.txt || echo "No platforms found"
            exit 1
          fi

      - name: Wait for Docker Hub to sync image
        run: sleep 120

      - name: Run Trivy vulnerability scanner with robust retry
        run: |
          for i in {1..5}; do
            trivy image --timeout 10m --format sarif -o trivy-results.sarif aywengo/kafka-schema-reg-mcp:${{ steps.meta.outputs.version }} && break
            echo "Trivy scan failed, retrying in 60s... ($i/5)"
            sleep 60
          done

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        continue-on-error: true  # Don't fail the workflow if SARIF upload fails
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Update Docker Hub description
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: aywengo/kafka-schema-reg-mcp
          short-description: "MCP Server for Kafka Schema Registry - 48 tools, OAuth integration (Azure/Google/Keycloak/Okta), Kubernetes ready"
          readme-filepath: ./dockerhub-readme.md

  create-release:
    runs-on: ubuntu-latest
    needs: publish
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write  # Required to create releases
    steps:
      - uses: actions/checkout@v4

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            ## üöÄ Kafka Schema Registry MCP Server ${{ github.ref_name }} - OAuth Security Update
            
            **üõ°Ô∏è OAuth Security Enhancement**: This release implements **mandatory PKCE support** and **OAuth 2.0 discovery endpoints** for seamless MCP client auto-configuration and enhanced security compliance.
            
            ### üîê What's New - OAuth Security Features
            
            #### **PKCE Mandatory (RFC 7636)**
            - **Required per MCP specification**: All authorization flows must use PKCE with S256 code challenge method
            - **Enhanced Security**: Prevents authorization code interception attacks
            - **MCP Compliant**: Follows MCP authorization specification requirements
            
            #### **OAuth Discovery Endpoints (RFC 8414, RFC 8692, RFC 7517)**
            - `/.well-known/oauth-authorization-server` - Authorization server metadata
            - `/.well-known/oauth-protected-resource` - Protected resource metadata  
            - `/.well-known/jwks.json` - JSON Web Key Set for token validation
            - **MCP Extensions**: Server info, tool counts, and capability discovery
            
            #### **Multi-Provider Support**
            - Azure AD, Google, Keycloak, Okta, GitHub OAuth integration
            - Automatic provider-specific endpoint configuration
            - Production-ready JWT validation
            
            ### üß™ Testing OAuth Discovery
            ```bash
            # Test OAuth discovery endpoints
            curl http://localhost:8000/.well-known/oauth-protected-resource
            curl http://localhost:8000/.well-known/oauth-authorization-server
            curl http://localhost:8000/.well-known/jwks.json
            
            # Start OAuth-secured server
            export ENABLE_AUTH=true AUTH_PROVIDER=azure AZURE_TENANT_ID=your-tenant
            python3 remote-mcp-server.py
            ```
            
            ### üì¶ Docker Image
            ```bash
            docker pull aywengo/kafka-schema-reg-mcp:${{ github.ref_name }}
            docker pull aywengo/kafka-schema-reg-mcp:latest
            ```
            
            **üìñ Documentation**: [OAuth Discovery & PKCE Guide](README.md#-oauth-discovery-endpoints)
          draft: false
          prerelease: false 
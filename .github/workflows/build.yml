name: Build

on:
  push:
    branches:
      - main
    paths:
      - 'Dockerfile'
      - '*.py'
      - 'requirements.txt'
  pull_request:
    branches:
      - main
    paths:
      - 'Dockerfile'
      - '*.py'
      - 'requirements.txt'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write  # Required for SARIF upload
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for testing (single platform)
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          tags: kafka-schema-reg-mcp:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true

      - name: Test MCP server Docker image
        run: |
          # Test that the MCP server starts correctly
          echo "Testing MCP server startup..."
          
          # Run the container briefly to test startup
          timeout 10s docker run --name test-container kafka-schema-reg-mcp:test &
          CONTAINER_PID=$!
          
          # Give it time to start
          sleep 5
          
          # Check if container is running
          if docker ps | grep -q test-container; then
            echo "✅ MCP server container started successfully"
          else
            echo "❌ MCP server container failed to start"
            docker logs test-container || true
            exit 1
          fi
          
          # Test that the image contains the correct files
          docker run --rm kafka-schema-reg-mcp:test ls -la | grep kafka_schema_registry_mcp.py
          
          # Test that dependencies are installed
          docker run --rm kafka-schema-reg-mcp:test python -c "import mcp; print('✅ MCP SDK installed')"
          
          # Cleanup
          docker stop test-container || true
          docker rm test-container || true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: kafka-schema-reg-mcp:test
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        continue-on-error: true  # Don't fail the workflow if SARIF upload fails
        with:
          sarif_file: 'trivy-results.sarif'
        
name: Test PR

on:
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: false
        default: 'all'
        type: choice
        options:
          - 'all'
          - 'lint-only'
          - 'quick-test-only'
          - 'integration-only'
          - 'docker-only'

jobs:
  lint:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'lint-only' }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black

      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Check code formatting
        run: |
          black --check --diff .

  quick-test:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'quick-test-only' }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio

      - name: Run unit tests
        run: |
          python -m pytest tests/test_unit.py -v

      - name: Run configuration tests
        run: |
          python tests/test_simple_config.py

  integration-test:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'integration-only' }}
    services:
      kafka:
        image: confluentinc/cp-kafka:latest
        env:
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        ports:
          - 9092:9092
      
      zookeeper:
        image: confluentinc/cp-zookeeper:latest
        env:
          ZOOKEEPER_CLIENT_PORT: 2181
          ZOOKEEPER_TICK_TIME: 2000
        ports:
          - 2181:2181
          
      schema-registry:
        image: confluentinc/cp-schema-registry:latest
        env:
          SCHEMA_REGISTRY_HOST_NAME: schema-registry
          SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:9092
        ports:
          - 8081:8081
        
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Wait for services
        run: |
          echo "Waiting for Schema Registry..."
          timeout 60 bash -c 'until curl -f http://localhost:8081/; do sleep 2; done'

      - name: Run MCP server tests
        run: |
          python tests/test_mcp_server.py

      - name: Run numbered configuration tests
        run: |
          python tests/test_numbered_config.py

  docker-test:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'docker-only' }}
    steps:
      - uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t test-image .

      - name: Test Docker image
        run: |
          docker run -d --name test-container -p 8000:8000 test-image
          sleep 10
          timeout 30 bash -c 'until curl -f http://localhost:8000/; do sleep 1; done'
          response=$(curl -s http://localhost:8000/)
          echo "Response: $response"
          docker stop test-container
          docker rm test-container 
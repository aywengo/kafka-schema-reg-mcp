#!/usr/bin/env python3
"""
Basic test for MCP server import and initialization
"""

import sys
import os
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def test_imports():
    """Test if we can import the MCP server modules."""
    print("üîç Testing imports...")
    
    try:
        import mcp
        print(f"‚úÖ MCP imported successfully")
    except ImportError as e:
        print(f"‚ùå Failed to import MCP: {e}")
        return False
    
    try:
        import requests
        print(f"‚úÖ Requests imported successfully")
    except ImportError as e:
        print(f"‚ùå Failed to import requests: {e}")
        return False
    
    try:
        import asyncio
        print(f"‚úÖ Asyncio imported successfully")
    except ImportError as e:
        print(f"‚ùå Failed to import asyncio: {e}")
        return False
    
    return True

def test_server_import():
    """Test if we can import the MCP server file."""
    print("\nüîç Testing MCP server import...")
    
    try:
        # Try importing the single registry server
        import kafka_schema_registry_mcp
        print(f"‚úÖ Single registry MCP server imported successfully")
    except ImportError as e:
        print(f"‚ùå Failed to import single registry MCP server: {e}")
        return False
    except Exception as e:
        print(f"‚ö†Ô∏è Import succeeded but got error: {e}")
    
    try:
        # Try importing the multi-registry server
        import kafka_schema_registry_multi_mcp
        print(f"‚úÖ Multi-registry MCP server imported successfully")
    except ImportError as e:
        print(f"‚ùå Failed to import multi-registry MCP server: {e}")
        return False
    except Exception as e:
        print(f"‚ö†Ô∏è Import succeeded but got error: {e}")
    
    return True

def test_basic_functionality():
    """Test basic server functionality without Schema Registry connection."""
    print("\nüîç Testing basic server functionality...")
    
    try:
        # Set test environment variables
        os.environ['SCHEMA_REGISTRY_URL'] = 'http://localhost:38081'
        os.environ['SCHEMA_REGISTRY_USER'] = ''
        os.environ['SCHEMA_REGISTRY_PASSWORD'] = ''
        
        # Test single registry server components
        import kafka_schema_registry_mcp
        
        # Check that the FastMCP instance exists
        if hasattr(kafka_schema_registry_mcp, 'mcp'):
            print(f"‚úÖ Single registry MCP instance found")
            
            # Check that it has tools (FastMCP exposes tools via _tools attribute)
            if hasattr(kafka_schema_registry_mcp.mcp, '_tools'):
                tools_count = len(kafka_schema_registry_mcp.mcp._tools)
                print(f"‚úÖ Single registry server has {tools_count} tools")
            else:
                print(f"‚ö†Ô∏è Single registry server tools not accessible")
        else:
            print(f"‚ùå Single registry MCP instance not found")
            return False
        
        # Check helper classes exist
        if hasattr(kafka_schema_registry_mcp, 'RegistryManager'):
            print(f"‚úÖ RegistryManager class found")
        
        if hasattr(kafka_schema_registry_mcp, 'RegistryClient'):
            print(f"‚úÖ RegistryClient class found")
        
        # Test registry manager instance
        if hasattr(kafka_schema_registry_mcp, 'registry_manager'):
            print(f"‚úÖ Registry manager instance found")
            registries = kafka_schema_registry_mcp.registry_manager.list_registries()
            print(f"‚úÖ Registry manager has {len(registries)} configured registries")
        
    except Exception as e:
        print(f"‚ùå Single registry server validation failed: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    try:
        # Test multi-registry server components
        import kafka_schema_registry_multi_mcp
        
        # Check that the FastMCP instance exists
        if hasattr(kafka_schema_registry_multi_mcp, 'mcp'):
            print(f"‚úÖ Multi-registry MCP instance found")
            
            # Check that it has tools
            if hasattr(kafka_schema_registry_multi_mcp.mcp, '_tools'):
                tools_count = len(kafka_schema_registry_multi_mcp.mcp._tools)
                print(f"‚úÖ Multi-registry server has {tools_count} tools")
            else:
                print(f"‚ö†Ô∏è Multi-registry server tools not accessible")
        else:
            print(f"‚ùå Multi-registry MCP instance not found")
            return False
        
    except Exception as e:
        print(f"‚ùå Multi-registry server validation failed: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    return True

def test_auth_config_single_mode(monkeypatch):
    """Test that auth config is correctly applied in single mode."""
    # Set environment variables for auth
    monkeypatch.setenv("ENABLE_AUTH", "true")
    monkeypatch.setenv("AUTH_ISSUER_URL", "https://test-issuer.com")
    monkeypatch.setenv("AUTH_VALID_SCOPES", "scope1,scope2")
    monkeypatch.setenv("AUTH_DEFAULT_SCOPES", "scope1")
    monkeypatch.setenv("AUTH_REQUIRED_SCOPES", "scope1")
    monkeypatch.setenv("AUTH_CLIENT_REG_ENABLED", "false")
    monkeypatch.setenv("AUTH_REVOCATION_ENABLED", "false")

    import importlib
    import kafka_schema_registry_mcp
    importlib.reload(kafka_schema_registry_mcp)

    mcp = kafka_schema_registry_mcp.mcp
    auth = getattr(mcp, "auth", None)
    assert auth is not None, "Auth should be set when ENABLE_AUTH is true"
    assert auth.issuer_url == "https://test-issuer.com"
    assert set(auth.client_registration_options.valid_scopes) == {"scope1", "scope2"}
    assert set(auth.client_registration_options.default_scopes) == {"scope1"}
    assert set(auth.required_scopes) == {"scope1"}
    assert not auth.client_registration_options.enabled
    assert not auth.revocation_options.enabled

def main():
    """Main test function."""
    print("üöÄ Starting basic MCP server tests...")
    print(f"üîç Python version: {sys.version}")
    print(f"üìÅ Current directory: {os.getcwd()}")
    
    # Test 1: Imports
    if not test_imports():
        print("\n‚ùå Import tests failed")
        return False
    
    # Test 2: Server imports
    if not test_server_import():
        print("\n‚ùå Server import tests failed")
        return False
    
    # Test 3: Basic functionality
    if not test_basic_functionality():
        print("\n‚ùå Basic functionality tests failed")
        return False
    
    print("\n‚úÖ All basic tests passed!")
    print("\nüìã Summary:")
    print("  ‚úÖ All required packages can be imported")
    print("  ‚úÖ MCP server modules can be imported")
    print("  ‚úÖ FastMCP instances can be accessed")
    print("  ‚úÖ Server tools are available")
    print("  ‚úÖ Helper classes and managers are available")
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 